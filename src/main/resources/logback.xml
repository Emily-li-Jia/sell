<?xml version="1.0" encoding="UTF-8" ?>
<!--根节点：
		scan: 当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
　　　　scanPeriod: 设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。
　　　　debug: 当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。-->
<configuration scan="true" scanPeriod="60 seconds" debug="false">
	<!--定义变量，通过${}进行取值-->
	<property name="APP_Name" value="myAppName" />
	<!--用于区分不同应用程序的记录-->
	<contextName>${APP_Name}</contextName>
	<!--获取时间戳字符串，他有两个属性key和datePattern
　　　　key: 标识此<timestamp> 的名字；
　　　　datePattern: 设置将当前时间（解析配置文件的时间）转换为字符串的模式-->
	<timestamp key="bySecond" datePattern="yyyyMMdd'T'HHmmss"/>
	<!--负责写日志的组件，它有两个必要属性name和class。name指定appender名称，class指定appender的全限定名-->
	<!--ConsoleAppender 把日志输出到控制台，有以下子节点：
　　　　　　<encoder>：对日志进行格式化。
　　　　　　<target>：字符串System.out(默认)或者System.err-->
	<appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
　　　　  <encoder>
				<!--格式化输出：%d表示日期，%thread表示线程名，%level：级别,%msg：日志消息，%n是换行符,%logger:输出日志的logger-->
　　　　　    <pattern>%d - [%thread] - %level - %logger - %msg %n</pattern>
　　　　  </encoder>
	</appender>
	<!--FileAppender：把日志添加到文件，有以下子节点：
　　　　　　<file>：被写入的文件名，可以是相对目录，也可以是绝对目录，如果上级目录不存在会自动创建，没有默认值。
　　　　　　<append>：如果是 true，日志被追加到文件结尾，如果是 false，清空现存文件，默认是true。
　　　　　　<encoder>：对记录事件进行格式化。
　　　　　　<prudent>：如果是 true，日志会被安全的写入文件，即使其他的FileAppender也在向此文件做写入操作，效率低，默认是 false。-->
	<appender name="FILE" class="ch.qos.logback.core.FileAppender">
		<!--过滤器，只输出error级别的日志-->
		<filter class="ch.qos.logback.classic.filter.ThresholdFilter">
			<level>ERROR</level>
		</filter>
　　　　<file>log/error.log</file>
　　　　<append>true</append>
　　　　<encoder>
　　　　　　<pattern>%d - [%thread] - %level - %logger - %msg %n</pattern>
　　　　</encoder>
　　</appender>
	<!--RollingFileAppender：滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件。有以下子节点：
　　　　　　<file>：被写入的文件名，可以是相对目录，也可以是绝对目录，如果上级目录不存在会自动创建，没有默认值。
　　　　　　<append>：如果是 true，日志被追加到文件结尾，如果是 false，清空现存文件，默认是true。
　　　　　　<rollingPolicy>:当发生滚动时，决定RollingFileAppender的行为，涉及文件移动和重命名。属性class定义具体的滚动策略类
　　　　　　class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy"： 最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责出发滚动。有以下子节点：
　　　　　　<fileNamePattern>：必要节点，包含文件名及“%d”转换符，“%d”可以包含一个java.text.SimpleDateFormat指定的时间格式，如：%d{yyyy-MM}。
如果直接使用 %d，默认格式是 yyyy-MM-dd。RollingFileAppender的file字节点可有可无，通过设置file，可以为活动文件和归档文件指定不同位置，当前日志总是记录到file指定的文件（活动文件），活动文件的名字不会改变；
如果没设置file，活动文件的名字会根据fileNamePattern 的值，每隔一段时间改变一次。“/”或者“\”会被当做目录分隔符。
　　　　　　<maxHistory>:可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件。假设设置每个月滚动，
且<maxHistory>是6，则只保存最近6个月的文件，删除之前的旧文件。注意，删除旧文件是，那些为了归档而创建的目录也会被删除。-->
	<appender name="FILE-Time" class="ch.qos.logback.core.rolling.RollingFileAppender">　
		<!--过滤器，输出除了error类级别的日志-->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>ERROR</level>
			<onMatch>DENY</onMatch>
			<onMismatch>ACCEPT</onMismatch>
		</filter>　　　　　　　　　　　
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">　　　　　　　　　　　　　　
			<fileNamePattern>log/info.%d.log</fileNamePattern> 　　　　　　　　　　　　　　
			<maxHistory>30</maxHistory> 　　　　　　　　　　　　
		</rollingPolicy> 　　　　　　　　　　　　
		<encoder>　　　　　　　　　　　　　　
			<pattern>%d - [%thread] - %level - %logger - %msg %n</pattern>
		</encoder> 　　　　　　　　　　
	</appender>
<!--用来设置某一个包或具体的某一个类的日志打印级别、以及指定<appender>。<loger>仅有一个name属性，一个可选的level和一个可选的addtivity属性。
    可以包含零个或多个<appender-ref>元素，标识这个appender将会添加到这个loger
　　　　name: 用来指定受此loger约束的某一个包或者具体的某一个类。
　　　　level: 用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL和OFF，还有一个特俗值INHERITED或者同义词NULL，代表强制执行上级的级别。 如果未设置此属性，那么当前loger将会继承上级的级别。
        addtivity: 是否向上级loger传递打印信息。默认是true。可以包含零个或多个<appender-ref>元素，标识这个appender将会添加到这个loger。-->
	<!--只输出warn级别以上的，additvity设置true表示向父logger传递-->
	<logger name="com.example.testlog.package01" level="warn" additivity="true">
		<appender-ref ref="FILE-Time"/>
	</logger>
	<!--设置根logger，也是一个logger，当子logger的additivity="true"时这里在处理一下:
	打日志的logger（子节点）和root（根节点），实际上，它输出日志是从子节点开始，子节点如果有输出源直接输入，
	如果无，判断配置的addtivity，是否像上级传递，即是否向root传递，传递则采用root的输出源，否则不输出日志。-->
	<root level="info">
		<appender-ref ref="FILE-Time"/>
		<appender-ref ref="STDOUT"/>
		<appender-ref ref="FILE"/>
	</root>
</configuration>